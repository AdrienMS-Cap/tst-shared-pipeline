name: Combined Workflow

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      branch:
        required: true
        type: string

jobs:
  start_create_workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create Branch and Repository Info Files
        run: |
          echo "${{ inputs.branch }}" > branch.txt
          echo "${{ inputs.repository }}" > repository.txt

      - name: Upload Branch and Repository Info as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: branch-info
          path: |
            branch.txt
            repository.txt

  ansible_lint:
    needs: start_create_workflow
    runs-on: ubuntu-latest

    steps:
      - name: Download Branch and Repository Info
        uses: actions/download-artifact@v2
        with:
          name: branch-info

      - name: Extract Branch and Repository Info
        run: |
          BRANCH_NAME=$(cat branch.txt)
          REPOSITORY=$(cat repository.txt)
          echo "Branch: $BRANCH_NAME, Repository: $REPOSITORY"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

    #   - name: List Files to be Linted
    #     run: |
    #       echo "Listing all YAML files that will be linted, excluding '.github' folder:"
    #       find . -type f -name '*.yml' -o -name '*.yaml' | grep -v '/.github/'

      - name: Run Ansible Lint
        run: ansible-lint

  push_to_branch:
    needs: ansible_lint
    runs-on: ubuntu-latest

    steps:
      - name: Download Branch and Repository Info
        uses: actions/download-artifact@v2
        with:
          name: branch-info

      - name: Extract Branch and Repository Info
        run: |
          BRANCH_NAME=$(cat branch.txt)
          REPOSITORY=$(cat repository.txt)
          echo "Branch: $BRANCH_NAME, Repository: $REPOSITORY"

      - name: Push to Branch
        if: success()
        run: |
          echo "Pushing to branch: $BRANCH_NAME"
          git config user.name "piptest"
          git config user.email "emailpi@mail.com"
          
          git fetch origin
          if [ -z "$BRANCH_NAME" ]; then
            echo "Error: BRANCH_NAME is not set."
            exit 1
          fi
      
          git merge origin/$BRANCH_NAME --no-ff --no-commit -X theirs --allow-unrelated-histories || { echo "Merge failed"; exit 1; }
      
          if ! git diff --quiet; then
            git commit -m "Merged branch $BRANCH_NAME"
            git push https://${{ secrets.PAT_MAX }}@github.com/${{ inputs.repository }}/$BRANCH_NAME
          else
            echo "No changes to commit on branch $BRANCH_NAME."
          fi
